<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Naoki Otsu</title>
  <subtitle>フロントエンド(HTML,CSS,JavaScript)を中心に。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-03T14:01:55.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Naoki Otsu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ローカルにPHP環境構築してBrowserSyncでLiveReload</title>
    <link href="http://yoursite.com/2016/11/28/local-php-browser-sync/"/>
    <id>http://yoursite.com/2016/11/28/local-php-browser-sync/</id>
    <published>2016-11-28T12:49:03.000Z</published>
    <updated>2016-12-03T14:01:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>MacのローカルにPHP環境構築して、<a href="https://www.browsersync.io/" target="_blank">BrowserSync</a>でLiveReloadさせた時のMEMO。</p>
<h2 id="実装方法"><a href="#実装方法" class="headerlink" title="実装方法"></a>実装方法</h2><p>調べた結果、<a href="https://www.npmjs.com/package/gulp-connect-php" target="_blank">gulp-connect-php</a>を使うのが早そうだった。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ yarn init -y</div><div class="line">$ yarn add -D gulp gulp-connect-php browser-sync</div></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>gulpfile.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp        = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> connect     = <span class="built_in">require</span>(<span class="string">'gulp-connect-php'</span>);</div><div class="line"><span class="keyword">var</span> browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create();</div><div class="line"></div><div class="line">gulp.task(<span class="string">'connect-sync'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  connect.server(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    browserSync.init(&#123;</div><div class="line">      <span class="attr">proxy</span>: <span class="string">'127.0.0.1:8000'</span></div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  gulp.watch([<span class="string">'./*.php'</span>, <span class="string">'./*.css'</span>, <span class="string">'./*.js'</span>]).on(<span class="string">'change'</span>, browserSync.reload);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'connect-sync'</span>]);</div></pre></td></tr></table></figure>
<p>これで <code>gulp</code> を叩いたら無事に構築出来ました。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MacのローカルにPHP環境構築して、&lt;a href=&quot;https://www.browsersync.io/&quot; target=&quot;_blank&quot;&gt;BrowserSync&lt;/a&gt;でLiveReloadさせた時のMEMO。&lt;/p&gt;
&lt;h2 id=&quot;実装方法&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Youtubeの再生リストの動画を一覧表示する | Youtube Data API v3</title>
    <link href="http://yoursite.com/2016/11/13/youtube-play-list-youtube-data-api-v3/"/>
    <id>http://yoursite.com/2016/11/13/youtube-play-list-youtube-data-api-v3/</id>
    <published>2016-11-13T12:48:04.000Z</published>
    <updated>2016-12-03T13:32:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>自分のプライベートなプロダクトで、<br>Youtubeの再生リストの動画を一覧表示する機能が入れる必要があって、<br><a href="https://developers.google.com/youtube/v3/getting-started?hl=ja" target="_blank">Youtube Data API v3 のガイド</a>を見ながらやっていたが、<br>スムーズに行かなかったので結論の実装方法をメモしておくことに。</p>
<h2><strong>実装方法</strong></h2>

<p>下記の4ステップを踏むと良かった。</p>
<h3><strong>1. APIキーを取得する</strong></h3>

<p><a href="https://developers.google.com/youtube/registering_an_application?hl=ja" target="_blank">こちら</a>の手順を踏んで、APIキーを取得する。</p>
<h3><strong>2. 表示したい動画のリクエストURLを<a href="https://developers.google.com/youtube/v3/docs/?hl=ja" target="_blank">リファレンス</a>から調べる</strong></h3>

<p>自分の場合は、再生リストの一覧が欲しかったので、<a href="https://developers.google.com/youtube/v3/docs/playlistItems/list?hl=ja" target="_blank">こちら</a>のリクエストURLが必要だった。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET https:<span class="comment">//www.googleapis.com/youtube/v3/playlistItems</span></div></pre></td></tr></table></figure>
<p>GET形式で、このURLにリクエストをすれば良いようだ。</p>
<h3><strong>3. 再生リストのIDを調べる</strong></h3>

<p>再生リストを表示したい場合は、再生リストIDというのが必要なようだった。<br>チャンネルIDとかも必要なのかなと思っていたが、それは必要なかった。</p>
<p>再生リストIDは、例えば<br><a href="https://www.youtube.com/playlist?list=PLlVlyGVtvuVnAx-u38QOieyVIrMEmzuDx" target="_blank">https://www.youtube.com/playlist?list=PLlVlyGVtvuVnAx-u38QOieyVIrMEmzuDx</a><br>の再生リストのIDは、</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PLlVlyGVtvuVnAx-u38QOieyVIrMEmzuDx</div></pre></td></tr></table></figure>
<p>のように、URLの最後の部分になるようだ。</p>
<h3><strong>4. Ajaxでリクエストを投げてレスポンスを表示する</strong></h3>

<p>Youtube Data API v3のガイドだと、リクエストURLに <code>?part=</code> とかを付けて、受け取ってねとあったが、<br>jQueryとかだと、下記のようにリクエストを投げても、無事に欲しいレスポンスが返ってくるので、自分はこっちで実装した。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'get'</span>,</div><div class="line">  <span class="attr">url</span>: <span class="string">'https://www.googleapis.com/youtube/v3/playlistItems'</span>, <span class="comment">// リクエストURL</span></div><div class="line">  dataType: <span class="string">'json'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">part</span>: <span class="string">'snippet'</span>, <span class="comment">// partは必須で指定が必要とのこと。レスポンスで返してもらいたいデータをカンマ区切りで指定する。snippetがあればとりあえず動画を再生するレスポンスが受け取れる。</span></div><div class="line">    playlistId: <span class="string">'PLlVlyGVtvuVnAx-u38QOieyVIrMEmzuDx'</span>, <span class="comment">// 再生リストID</span></div><div class="line">    maxResults: <span class="number">20</span>, <span class="comment">// デフォルトは5件までしか受け取らないので、取得件数を変更</span></div><div class="line">    key: <span class="string">'&#123;APIキー&#125;'</span></div><div class="line">  &#125;</div><div class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">  <span class="comment">// 成功</span></div><div class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// エラー</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>これで入力項目が問題なければ、成功するので、<br>あとは、返ってきた <code>response</code> から動画を表示させれば良い。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">response.items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> id = item.snippet.resourceId.videoId;</div><div class="line">    $(<span class="string">'#list'</span>).append(<span class="string">'&amp;lt;iframe width="560" height="315" src="https://www.youtube.com/embed/'</span>+ id +<span class="string">'" frameborder="0" allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自分のプライベートなプロダクトで、&lt;br&gt;Youtubeの再生リストの動画を一覧表示する機能が入れる必要があって、&lt;br&gt;&lt;a href=&quot;https://developers.google.com/youtube/v3/getting-started?hl=ja&quot; tar
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Font Awesomeで、「Failed to decode downloaded font」が出てしまう時</title>
    <link href="http://yoursite.com/2016/11/11/font-awesome-error/"/>
    <id>http://yoursite.com/2016/11/11/font-awesome-error/</id>
    <published>2016-11-11T12:46:57.000Z</published>
    <updated>2016-12-03T13:34:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://fontawesome.io/" target="_blank">Font Awesome</a>を使っていて、本番サイトで確認しようとしたら、<br>フォントが正しく出ていない… ローカルでは大丈夫だったのに..</p>
<p>そして、コンソールを見たら、<br><strong>「Failed to decode downloaded font」</strong><br>とか<br><strong>「OTS parsing error: incorrect file size in WOFF header」</strong><br>とか出ている様子。</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>調べてみると、gitの改行コードを変換する仕組みによって起きてる模様だった。<br>参考: <a href="http://ts0818.hatenablog.com/entry/2016/04/01/225341" target="_blank">『Failed to decode downloaded font』から始まるエラー</a></p>
<h2 id="対策"><a href="#対策" class="headerlink" title="対策"></a>対策</h2><p>gitのルートディレクトリにある、「.gitattributes」ファイルを開いて、<br>変換しないように下記を追加してあげると問題なかった。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Denote all files that are truly binary and should not be modified.</div><div class="line">... 中略</div><div class="line">*.otf binary</div><div class="line">*.eot binary</div><div class="line">*.svg binary</div><div class="line">*.ttf binary</div><div class="line">*.woff binary</div><div class="line">*.woff2 binary</div></pre></td></tr></table></figure>
<p>もう一度、正しいフォントを格納して、git pushして確認したところ無事解決でした。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://fontawesome.io/&quot; target=&quot;_blank&quot;&gt;Font Awesome&lt;/a&gt;を使っていて、本番サイトで確認しようとしたら、&lt;br&gt;フォントが正しく出ていない… ローカルでは大丈夫だったのに..&lt;/p&gt;
&lt;p&gt;そして、コン
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ソフトバンク 孫社長</title>
    <link href="http://yoursite.com/2016/11/01/softbank-son-president/"/>
    <id>http://yoursite.com/2016/11/01/softbank-son-president/</id>
    <published>2016-11-01T12:46:03.000Z</published>
    <updated>2016-12-03T21:04:00.000Z</updated>
    
    <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/zhrz8KdUB4w" frameborder="0" allowfullscreen></iframe>

<p>孫社長はずっと前から尊敬している事業家のお一人で、<br>東京ビックサイトで行われたソフトバンクBBの入社式で、豆粒ぐらいとても遠くでお話されていたのにすごく感動したのを思い出す。</p>
<p>本や雑誌でも様々なことを学ばせて頂いてるけども、<br>この動画でおっしゃってる事や考えが原点にあるような気がしていて、これまでにも何度も見た。</p>
<p>お金とか地位とか名誉とかそんなことじゃなく、自分がやりたいと思った事を貫くかっこよさ。<br>自分が死ぬ前に、あ〜無難に生きたな、出世できたなとかそんな小さな事じゃなく、<br>心からやりたい事を本気でやったなと思って死にたい。<br>そんな想いをこの動画から感じる。</p>
<h2 id="ある時に"><a href="#ある時に" class="headerlink" title="ある時に"></a>ある時に</h2><p>そんな孫社長が何かの折に「流行りのおっかけ屋さん」という表現をおっしゃっていたのを聞いて、そのフレーズに自分の中ではドキっとした。<br>それは自分の今の職業(フロントエンドエンジニア)やITという業界そのものが、流行りのおっかけ要素が満載だからだろう。<br>決して今の職業や業界が嫌いとかじゃなく大好きなんだけど、技術はあくまで手段で、<br>「ユーザーさんに何を提供したのか」ってところがほんとに大事で、その部分の意識の持ち方によって日々の過ごし方もガラっと変わってきそうだ。</p>
<h2 id="大切だと思ってること"><a href="#大切だと思ってること" class="headerlink" title="大切だと思ってること"></a>大切だと思ってること</h2><p>高い技術はもちろん大切。<br>でも高い技術を持つより大切なのは、もっと愚直に使ってくれているユーザーさんに目を向けた思いやりの気持ちで、場合によっては、技術自体は超古いんだけど、ユーザーさんにとっては最高の体験を提供している事が工数1時間で実装出来た、なんて事が全然起こり得ると思っている。<br>だからこそ、そこに対して日々向き合っていかないと「ただの流行りのおっかけ屋さん」になってしまうじゃなかろうか、なんてことを思っている。</p>
]]></content>
    
    <summary type="html">
    
      &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/zhrz8KdUB4w&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;孫社長はずっと前から尊敬し
    
    </summary>
    
      <category term="プライベート" scheme="http://yoursite.com/categories/%E3%83%97%E3%83%A9%E3%82%A4%E3%83%99%E3%83%BC%E3%83%88/"/>
    
    
  </entry>
  
  <entry>
    <title>CakePHP3とBrowserSyncでのLiveReload</title>
    <link href="http://yoursite.com/2016/10/29/cakephp3-browser-sync-live-reload/"/>
    <id>http://yoursite.com/2016/10/29/cakephp3-browser-sync-live-reload/</id>
    <published>2016-10-29T12:45:10.000Z</published>
    <updated>2016-12-03T14:13:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>[CakePHP3でWebアプリの開発をしていたが、<br>BrowserSyncを使ってLiveReloadさせて効率よく開発していきたい。そんな時のMEMO。</p>
<h2 id="実装方法"><a href="#実装方法" class="headerlink" title="実装方法"></a>実装方法</h2><p>CakePHPでは</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/cake server</div></pre></td></tr></table></figure>
<p>で、デフォルトは、 <code>localhost:8765</code> のサーバーが立ち上がるが、</p>
<p>まずはこれを、</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/cake server -H &#123;IPアドレス&#125; -p 8765</div></pre></td></tr></table></figure>
<p>で起動させて、 {IPアドレス}:8765 で立ち上げておく。</p>
<p>そしてBrowserSync側では、optionsのproxyとportを設定すれば良さそう。</p>
<figure class="highlight js"><figcaption><span>gulpfile.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">proxy</span>: <span class="string">"&#123;IPアドレス&#125;:8765"</span>,</div><div class="line">    <span class="attr">port</span>: <span class="number">4000</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>これでBrowserSyncをstartさせたら、<br><a href="http://{IPアドレス}:4000/" target="_blank" rel="external">http://{IPアドレス}:4000/</a> もしくは <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> へのアクセスで問題なくLiveReload出来た。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[CakePHP3でWebアプリの開発をしていたが、&lt;br&gt;BrowserSyncを使ってLiveReloadさせて効率よく開発していきたい。そんな時のMEMO。&lt;/p&gt;
&lt;h2 id=&quot;実装方法&quot;&gt;&lt;a href=&quot;#実装方法&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vagrantで開発環境構築(PHP+Mysql) &amp;#124; VirtualBox</title>
    <link href="http://yoursite.com/2016/10/25/vagrant-php-mysql-virtualbox/"/>
    <id>http://yoursite.com/2016/10/25/vagrant-php-mysql-virtualbox/</id>
    <published>2016-10-25T12:44:12.000Z</published>
    <updated>2016-12-03T14:13:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>開発環境構築のメモ。</p>
<h2 id="参考にした記事"><a href="#参考にした記事" class="headerlink" title="参考にした記事"></a>参考にした記事</h2><p>こちらの記事を参考に構築。<br><a href="http://fnya.cocolog-nifty.com/blog/2015/12/vagrant-centos7.html" target="_blank" rel="external">http://fnya.cocolog-nifty.com/blog/2015/12/vagrant-centos7.html</a></p>
<p>シンボリックリンクを貼って、ローカルPCからファイル編集出来るようにするのに、下記を参照。<br><a href="http://qiita.com/tiwu_official/items/f135e6b6fbbe3ec6aa54#8%E3%82%B7%E3%83%B3%E3%83%9C%E3%83%AA%E3%83%83%E3%82%AF%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%AE%E4%BD%9C%E6%88%90" target="_blank" rel="external">http://qiita.com/tiwu_official/items/f135e6b6fbbe3ec6aa54#8%E3%82%B7%E3%83%B3%E3%83%9C%E3%83%AA%E3%83%83%E3%82%AF%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%AE%E4%BD%9C%E6%88%90</a></p>
<p>ただファイル共有が使えないエラーが出てた。ので下記を参考に解決。<br><a href="http://stackoverflow.com/questions/22717428/vagrant-error-failed-to-mount-folders-in-linux-guest" target="_blank" rel="external">http://stackoverflow.com/questions/22717428/vagrant-error-failed-to-mount-folders-in-linux-guest</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;開発環境構築のメモ。&lt;/p&gt;
&lt;h2 id=&quot;参考にした記事&quot;&gt;&lt;a href=&quot;#参考にした記事&quot; class=&quot;headerlink&quot; title=&quot;参考にした記事&quot;&gt;&lt;/a&gt;参考にした記事&lt;/h2&gt;&lt;p&gt;こちらの記事を参考に構築。&lt;br&gt;&lt;a href=&quot;http:/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScriptで要素の入れ替え | replaceChild, cloneNode</title>
    <link href="http://yoursite.com/2016/09/24/javascript-replace-child-clone-node/"/>
    <id>http://yoursite.com/2016/09/24/javascript-replace-child-clone-node/</id>
    <published>2016-09-24T12:42:55.000Z</published>
    <updated>2016-12-03T14:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>[ピュア(Vanilla)なJavaScriptでの要素の入れ替えのMEMO。<br>例えばAとBの要素を入れ替えたい時など。</p>
<h2 id="実装方法"><a href="#実装方法" class="headerlink" title="実装方法"></a>実装方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clone_A = element_A.cloneNode(<span class="literal">true</span>);</div><div class="line"><span class="keyword">var</span> clone_B = element_B.cloneNode(<span class="literal">true</span>);</div><div class="line"></div><div class="line">element_A.parentNode.replaceChild(clone_A, element_B);</div><div class="line">element_B.parentNode.replaceChild(clone_B, element_A);</div></pre></td></tr></table></figure>
<p>cloneNodeで要素のクローンを作った後に、replaceChildで置換する。<br>cloneNodeの引数は、nodeの子孫ノードも複製する場合はtrue<br>nodeのみを複製する場合はfalseとなる。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[ピュア(Vanilla)なJavaScriptでの要素の入れ替えのMEMO。&lt;br&gt;例えばAとBの要素を入れ替えたい時など。&lt;/p&gt;
&lt;h2 id=&quot;実装方法&quot;&gt;&lt;a href=&quot;#実装方法&quot; class=&quot;headerlink&quot; title=&quot;実装方法&quot;&gt;&lt;/a&gt;実装方
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScriptで配列をシャッフルさせる</title>
    <link href="http://yoursite.com/2016/09/22/javascript-array-shuffle/"/>
    <id>http://yoursite.com/2016/09/22/javascript-array-shuffle/</id>
    <published>2016-09-22T12:41:44.000Z</published>
    <updated>2016-12-03T14:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>[ピュア(Vanilla)なJavaScriptでの配列のシャッフル。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> targets = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> results = [];</div><div class="line"><span class="keyword">while</span> (targets.length) &#123;</div><div class="line">    results.push(targets.splice(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * targets.length), <span class="number">1</span>)[<span class="number">0</span>]);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(results); <span class="comment">// 例: [5, 1, 4, 3, 2]</span></div></pre></td></tr></table></figure>
<h2 id="ただちょっと注意も"><a href="#ただちょっと注意も" class="headerlink" title="ただちょっと注意も"></a>ただちょっと注意も</h2><p>※ただこのやり方だと全く同じ配列が返されてしまう場合もある。<br>間違いなくシャッフルさせなければいけない時の記述はもう少し複雑になるが、下記を参照。</p>
<p><a href="https://h2ham.net/javascript-%E3%81%A7%E9%85%8D%E5%88%97%E3%81%AE%E3%82%B7%E3%83%A3%E3%83%83%E3%83%95%E3%83%AB" target="_blank" rel="external">JavaScriptで配列のシャッフル</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[ピュア(Vanilla)なJavaScriptでの配列のシャッフル。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div cla
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScriptでペアな配列を作る時のMEMO</title>
    <link href="http://yoursite.com/2016/09/22/javascript-pare-array-create/"/>
    <id>http://yoursite.com/2016/09/22/javascript-pare-array-create/</id>
    <published>2016-09-22T12:39:34.000Z</published>
    <updated>2016-12-03T13:43:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>[神経衰弱を作る時のような、[1, 1, 2, 2]のようなペアな値を持った配列が欲しい時の実装MEMO。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cards = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &amp;lt;= <span class="number">2</span>; i++) &#123;</div><div class="line">    cards[cards.length] = i;</div><div class="line">    cards[cards.length] = i;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(cards); <span class="comment">// [1, 1, 2, 2]</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[神経衰弱を作る時のような、[1, 1, 2, 2]のようなペアな値を持った配列が欲しい時の実装MEMO。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;lin
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>addEventListenerに引数を渡しつつremoveEventListenerしたい時</title>
    <link href="http://yoursite.com/2016/09/22/javascript-addeventlistener-param-removeeventlistener/"/>
    <id>http://yoursite.com/2016/09/22/javascript-addeventlistener-param-removeeventlistener/</id>
    <published>2016-09-22T12:38:36.000Z</published>
    <updated>2016-12-03T13:43:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>全然スマートじゃないからもっと良い方法ありそうだけど、一応備忘録。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">element.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> <span class="title">onClick</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    onClickHandler(onClick, <span class="string">'渡したい引数'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onClickHandler</span>(<span class="params">func, text</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(text); <span class="comment">// 渡したい引数</span></div><div class="line">    element.removeEventListener(<span class="string">'click'</span>, func);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;全然スマートじゃないからもっと良い方法ありそうだけど、一応備忘録。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ボタンのデザインを変えずに、クリック領域だけ広げるTips</title>
    <link href="http://yoursite.com/2016/09/18/no-change-button-design-click-scale/"/>
    <id>http://yoursite.com/2016/09/18/no-change-button-design-click-scale/</id>
    <published>2016-09-18T12:37:05.000Z</published>
    <updated>2016-12-03T14:15:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>「<a href="https://www.amazon.co.jp/CSS%E3%82%B7%E3%83%BC%E3%82%AF%E3%83%AC%E3%83%83%E3%83%88-%E2%80%9547%E3%81%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF%E3%81%A7CSS%E3%82%92%E8%87%AA%E5%9C%A8%E3%81%AB%E6%93%8D%E3%82%8B-Lea-Verou/dp/4873117666/ref=sr_1_1?ie=UTF8&amp;qid=1474188594&amp;sr=8-1&amp;keywords=CSS%E3%82%B7%E3%83%BC%E3%82%AF%E3%83%AC%E3%83%83%E3%83%88" target="_blank" rel="external">CSSシークレット</a>」で書かれていた備忘録だが、<br>ボタンのデザインは変えたくない、でもクリックできる領域を広げたい時のTips。</p>
<h2 id="実装方法"><a href="#実装方法" class="headerlink" title="実装方法"></a>実装方法</h2><p>擬似要素を使って下記のように実装する。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.target</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.target</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: -<span class="number">15px</span>; <span class="attribute">bottom</span>: -<span class="number">15px</span>; <span class="attribute">right</span>: -<span class="number">15px</span>; <span class="attribute">left</span>: -<span class="number">15px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上記の場合、ボタンの周りに15pxクリック領域が出来る。</p>
<h2 id="他のやり方も"><a href="#他のやり方も" class="headerlink" title="他のやり方も"></a>他のやり方も</h2><p>擬似要素を既に使っている時は、ボーダーを使ったやり方もある。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.target</span> &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">15px</span> solid transparent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>この場合、ボタン領域に15pxの透明なボーダーが出来て領域が広がる。</p>
<p>もしこれでボタンの背景が広がってしまう場合は、background-clip: padding-box;を指定することで回避することもできる。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.target</span> &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">15px</span> solid transparent;</div><div class="line">    <span class="attribute">background-clip</span>: padding-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「&lt;a href=&quot;https://www.amazon.co.jp/CSS%E3%82%B7%E3%83%BC%E3%82%AF%E3%83%AC%E3%83%83%E3%83%88-%E2%80%9547%E3%81%AE%E3%83%86%E3%82%AF%E3%83
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SVGで円をアニメーションさせたい時のMEMO</title>
    <link href="http://yoursite.com/2016/09/18/svg-circle-animation/"/>
    <id>http://yoursite.com/2016/09/18/svg-circle-animation/</id>
    <published>2016-09-18T12:35:38.000Z</published>
    <updated>2016-12-03T14:16:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>くるっと回る円のアニメーションを作りたい。</p>
<p><img src="https://qiita-image-store.s3.amazonaws.com/0/2582/b6d35e8d-0301-57c4-e4c3-2b12ed7fafd9.png" alt="Create_a_New_Pen.png"></p>
<p><a href="http://codepen.io/melo15/pen/yJmVEJ" target="_blank" rel="external">http://codepen.io/melo15/pen/yJmVEJ</a></p>
<h2 id="実装方法"><a href="#実装方法" class="headerlink" title="実装方法"></a>実装方法</h2><p>下記のように実装すると良い。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"124"</span> <span class="attr">height</span>=<span class="string">"124"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"62"</span> <span class="attr">cy</span>=<span class="string">"62"</span> <span class="attr">r</span>=<span class="string">"60"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">svg</span> &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-90deg);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">circle</span> &#123;</div><div class="line">    <span class="attribute">fill</span>: transparent;</div><div class="line">    <span class="attribute">stroke</span>: <span class="number">#4fa8df</span>;</div><div class="line">    <span class="attribute">stroke-width</span>: <span class="number">4</span>;</div><div class="line">    <span class="attribute">animation</span>: circle <span class="number">1s</span> infinite;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> circle &#123;</div><div class="line">  0% &#123; <span class="attribute">stroke-dasharray</span>: <span class="number">0</span> <span class="number">377</span>; &#125;</div><div class="line">  99<span class="selector-class">.9</span>%,<span class="selector-tag">to</span> &#123; <span class="attribute">stroke-dasharray</span>: <span class="number">377</span> <span class="number">377</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="対応ブラウザ"><a href="#対応ブラウザ" class="headerlink" title="対応ブラウザ"></a>対応ブラウザ</h2><p>インラインSVGなので、モダンブラウザは対応していて、<br>IE8以下、Android2系以下辺りは使えなさそう。<br><a href="http://caniuse.com/#feat=svg-html5" target="_blank" rel="external">http://caniuse.com/#feat=svg-html5</a></p>
<h2 id="実装方法-1"><a href="#実装方法-1" class="headerlink" title="実装方法"></a>実装方法</h2><p>半径60pxの円を作りたいとすると、<br><code>&lt;svg&gt;</code>の<code>width</code>と<code>height</code>には、<code>60px x 2 = 120px</code><br>これに、のちのち設定する円の外側の線幅(stroke-width)の4pxを足して、124pxを設定する。<br><code>&lt;circle&gt;</code>の<code>cx</code>と<code>cy</code>には、124pxの半分の値を設定し、円を<code>&lt;svg&gt;</code>の中央に配置する。<br><code>r</code>は円の半径で60pxを設定するが、この値によって後々アニメーションさせる時の値が変わってくる。</p>
<h3 id="CSSでは"><a href="#CSSでは" class="headerlink" title="CSSでは"></a>CSSでは</h3><p><code>&lt;circle&gt;</code>の<code>fill</code>を<code>transparent</code>にして塗りつぶしなしに設定。<br><code>stroke</code>と<code>stroke-width</code>を指定して、円の外側に線を表示する。<br>これを<code>animation</code>を使って、くるっと回るアニメーションにする。</p>
<h3 id="アニメーションでは"><a href="#アニメーションでは" class="headerlink" title="アニメーションでは"></a>アニメーションでは</h3><p>破線を設定する<code>stroke-dasharray</code>を使う。<br><code>stroke-dasharray: 破線の長さ 破線の間隔;</code><br>この破線の長さをアニメーションさせる事で、くるっと回るアニメーションとなる。</p>
<h3 id="破線の間隔の値"><a href="#破線の間隔の値" class="headerlink" title="破線の間隔の値"></a>破線の間隔の値</h3><p>この時、破線の間隔の値は、円周の長さを設定する必要があり、計算によって導く。<br>円周の長さは<code>直径 x 3.14</code>で計算する。<br>今回は、<code>120 x 3.14 = 376.8</code>なので、小数点を切り上げて<code>377</code>とした。<br>あとは、破線の長さを0から377までアニメーションさせると、くるっと1周するアニメーションとなる。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> circle &#123;</div><div class="line">  0% &#123; <span class="attribute">stroke-dasharray</span>: <span class="number">0</span> <span class="number">377</span>; &#125;</div><div class="line">  99<span class="selector-class">.9</span>%,<span class="selector-tag">to</span> &#123; <span class="attribute">stroke-dasharray</span>: <span class="number">377</span> <span class="number">377</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1周ではなく半分のところで止めたい場合は"><a href="#1周ではなく半分のところで止めたい場合は" class="headerlink" title="1周ではなく半分のところで止めたい場合は"></a>1周ではなく半分のところで止めたい場合は</h3><p>半分のところで止めたい場合は、<code>377 / 2 = 188.5</code>などを設定すると良い。</p>
<p>最後に、そのままだとアニメーションの開始点が90度ずれてしまうので、<br><code>&lt;svg&gt;</code>に<code>transform: rotate(-90deg);</code>を設定して、上からくるっと回るアニメーションにする。</p>
<p>同じようなアニメーションのデモも、CodePenにあったのでメモ。</p>
<p><a href="https://codepen.io/kyledws/pen/Gvelt/" target="_blank" rel="external">https://codepen.io/kyledws/pen/Gvelt/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;くるっと回る円のアニメーションを作りたい。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/2582/b6d35e8d-0301-57c4-e4c3-2b12ed7fafd9.png&quot; alt=&quot;C
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>border-imageをRetina対応させるときの備忘録</title>
    <link href="http://yoursite.com/2016/09/18/border-image-retina/"/>
    <id>http://yoursite.com/2016/09/18/border-image-retina/</id>
    <published>2016-09-18T12:34:20.000Z</published>
    <updated>2016-12-03T13:57:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>border-imageを使う時は、<br><a href="http://border-image.com/" target="_blank" rel="external">http://border-image.com/</a><br>を使ってCSSソースを生成して貼り付ける事が多いが、<br>このサイトで生成したCSSはRetina対応してない素の画像サイズなので、<br>スマホ制作してる時とかは画像が大きくなっちゃう。</p>
<h2 id="Retina対応させる方法"><a href="#Retina対応させる方法" class="headerlink" title="Retina対応させる方法"></a>Retina対応させる方法</h2><p>Retina対応する場合は、<code>border-image</code>の数値は変えず、<br><code>border-width</code>の値だけ、1/2とかにすると良いので、<br>例えば、こうなっていたら↓</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">border-width</span>: 36<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> 44<span class="selector-tag">px</span>;</div></pre></td></tr></table></figure>
<p>こうする↓</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">border-width</span>: 18<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 22<span class="selector-tag">px</span>;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;border-imageを使う時は、&lt;br&gt;&lt;a href=&quot;http://border-image.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://border-image.com/&lt;/a&gt;&lt;br&gt;を使ってCSSソースを生成して貼り
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>さくっとLiveReload導入メモ</title>
    <link href="http://yoursite.com/2016/09/18/live-reload-browser-sync/"/>
    <id>http://yoursite.com/2016/09/18/live-reload-browser-sync/</id>
    <published>2016-09-18T12:30:35.000Z</published>
    <updated>2016-12-03T13:59:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>さっとローカルサーバーを立ち上げて、LiveReloadさせて作業する時のメモ。</p>
<h2 id="セットアップ"><a href="#セットアップ" class="headerlink" title="セットアップ"></a>セットアップ</h2><p>まずは作業場所で、セットアップ。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm init -y</div><div class="line">$ npm i -g browser-sync # グローバルに入れてなかったら</div><div class="line">$ npm i -D browser-sync</div></pre></td></tr></table></figure>
<p>package.jsonにシェルを記載。</p>
<figure class="highlight"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">  "live": "browser-sync start --server --no-notify --files \"**/*\""</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="npm-run"><a href="#npm-run" class="headerlink" title="npm run"></a>npm run</h2><p><code>npm run live</code>を実行すると、ブラウザが開いてローカルサーバーが立ち上がり、<br>ファイルを監視して、LiveReload開始。<br>Sync時に右上に表示されるお知らせは無くしたかったので、<code>–no-notify</code>を付けてる。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run live</div></pre></td></tr></table></figure>
<p>オプションを付けたりしたい時は下記から<br><a href="https://www.browsersync.io/docs/command-line#start" target="_blank" rel="external">https://www.browsersync.io/docs/command-line#start</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;さっとローカルサーバーを立ち上げて、LiveReloadさせて作業する時のメモ。&lt;/p&gt;
&lt;h2 id=&quot;セットアップ&quot;&gt;&lt;a href=&quot;#セットアップ&quot; class=&quot;headerlink&quot; title=&quot;セットアップ&quot;&gt;&lt;/a&gt;セットアップ&lt;/h2&gt;&lt;p&gt;まずは作業場
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>あるボタンを押した時のアニメーション効果を連打しても確実に付けさせたい</title>
    <link href="http://yoursite.com/2016/09/03/button-click-animation/"/>
    <id>http://yoursite.com/2016/09/03/button-click-animation/</id>
    <published>2016-09-03T12:05:17.000Z</published>
    <updated>2016-12-03T14:00:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>あるボタンを押した時に、<br>ぽよんと反応するようなアニメーション効果を与えたい。<br>その要素を押したら、例えば <code>.click-animation</code>のような、ぽよんとするCSSアニメーションを付けたクラスを、付与させる事が多いが、そんな時の実装MEMO。  </p>
<h2 id="従来の方法"><a href="#従来の方法" class="headerlink" title="従来の方法"></a>従来の方法</h2><p>要素を押した時に、<code>.click-animation</code>が既に付与されていたら、<br>削除してから付与しないとアニメーションしなく、<br>また削除して即付与してもアニメーションしないので、<br><code>setTimeout()</code>などで適当な一定時間待って付与する事が多かった。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(target).removeClass(<span class="string">'click-animation'</span>);</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(target).addClass(<span class="string">'click-animation'</span>);</div><div class="line">&#125;, <span class="number">10</span>);</div></pre></td></tr></table></figure>
<p>もしくは、<code>webkitAnimationEnd</code>などを使って、アニメーション後にクラス削除などしていた。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(target).addClass(<span class="string">'click-animation'</span>);</div><div class="line">$(target).on(<span class="string">'webkitAnimationEnd'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(target).removeClass(<span class="string">'click-animation'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>ただこれだと連打した場合に反応してくれない場合がある。</p>
<h2 id="実装方法"><a href="#実装方法" class="headerlink" title="実装方法"></a>実装方法</h2><p>結論、<code>requestAnimationFrame</code>を使うと良さそう。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(target).removeClass(<span class="string">'click-animation'</span>);</div><div class="line">requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(target).addClass(<span class="string">'click-animation'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>これだと高橋名人ばりに連打した場合も確実にアニメーション効果を与える事ができた。<br>ブラウザの次のレンダリングフレームを待ってクラス付与してるから確実ということだろうか。</p>
<p>Google I/O 2016の<a href="https://github.com/GoogleChrome/ui-element-samples/blob/gh-pages/swipeable-cards/cards.js#L166-L175" target="_blank" rel="external">実装サンプル</a>とかでも、<code>requestAnimationFrame</code>を使った要素の付与や削除をやってるようだった。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;あるボタンを押した時に、&lt;br&gt;ぽよんと反応するようなアニメーション効果を与えたい。&lt;br&gt;その要素を押したら、例えば &lt;code&gt;.click-animation&lt;/code&gt;のような、ぽよんとするCSSアニメーションを付けたクラスを、付与させる事が多いが、そんな時の実装
    
    </summary>
    
    
  </entry>
  
</feed>
